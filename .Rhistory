aggregate(data$steps, list(data$interval), mean)
aggregate(data$steps, data$interval, mean)
aggregate(data$interval, list(data$steps), mean)
library("xtabs")
?xtabs
xtabs(Freq ~ Date + Steps, data)
xtabs(Sum ~ Date + Steps, data)
xtabs(steps ~ date + interval, data)
xtabs(interval~steps,aggregate(interval~steps,data,mean))
test  = xtabs(interval~steps,aggregate(interval~steps,data,mean))
test[5]
test  = xtabs(steps~interval,aggregate(steps~interval,data,mean))
test
avgSteps  = xtabs(steps~interval,aggregate(steps~interval,data,mean))
hist(avgSteps)
class(avgSteps)
hist(as.numberic(avgSteps))
hist(as.numeric(avgSteps))
hist(avgSteps)
library(ggplot2)
avgSteps  = xtabs(steps~interval,aggregate(steps~interval,data,mean))
avgSteps[,1]
avgSteps[1,]
avgSteps[2,]
avgSteps[,]
avgStep
avgSteps
avgSteps[2,]
avgSteps
avgSteps  = vector(xtabs(steps~interval,aggregate(steps~interval,data,mean)))
avgSteps[1][2]
avgSteps[1][5]
avgSteps[5][5]
avgSteps[,][2]
avgSteps[2][,]
avgSteps[2][0]
avgSteps[2,]
avgSteps  = data.frame(xtabs(steps~interval,aggregate(steps~interval,data,mean)))
View(avgSteps)
avgSteps[2]
qplot(avgSteps[0], avgSteps[1])
qplot(avgSteps[0], avgSteps[1], type="l")
View(avgSteps)
qplot(interval, Freq, data = avgSteps)
qplot(interval, Freq, data = avgSteps, ylab = "Average Steps")
View(avgSteps)
qplot(interval, Freq, data = avgSteps, ylab = "Average Steps",
xlab = "5-Minute Daily Interval",
title = "Average Number of Steps Taken by 5-Minute Interval")
qplot(interval, Freq, data = avgSteps, ylab = "Average Steps",
xlab = "5-Minute Daily Interval",
title = "Average Number of Steps Taken by 5-Minute Interval") +
geom_line()
qplot(interval, Freq, data = avgSteps, ylab = "Average Steps",
xlab = "5-Minute Daily Interval",
title = "Average Number of Steps Taken by 5-Minute Interval")
g + geom_line()
g = qplot(interval, Freq, data = avgSteps, ylab = "Average Steps",
xlab = "5-Minute Daily Interval",
title = "Average Number of Steps Taken by 5-Minute Interval")
g = qplot(interval, Freq, data = avgSteps, ylab = "Average Steps",
xlab = "5-Minute Daily Interval",
title = "Average Number of Steps Taken by 5-Minute Interval")
g + geom_line()
qplot(interval, Freq, data = avgSteps, ylab = "Average Steps",
xlab = "5-Minute Daily Interval")
qplot(interval, Freq, data = avgSteps, ylab = "Average Steps",
xlab = "5-Minute Daily Interval") + geom_line()
which.max(avgSteps$Freq)
max(avgSteps$Freq)
avgSteps[104]
avgSteps[104,]
avgSteps[104,][1]
max(avgSteps$Freq)
which.max(avgSteps$Freq)
which.max(avgSteps$Freq)
interval = which.max(avgSteps$Freq)
maxInterval = which.max(avgSteps$Freq)
maxSteps = max(avgSteps$Freq)
apply(data, 1, function(x) sum(is.na(x))) / ncol(data) * 100
totalRecords = length(data$steps)
completeRecords = length(na.omit(data$steps))
missingRecords = totalRecords - completeRecords
totalRecords
completeRecords
missingRecords
data$step2 = data$step
View(data)
?is.na
for (item in data$step)
if(is.na(item)) {
data$step2[item] = 999
}
View(data)
data$step[3]
data$step[55]
data$step[555]
data$step[55534253]
data$step[928]
data$step[928,]
data$step[,928]
data$step
View(data)
data$steps2 = data$steps
View(data)
for (item in data$steps)
if(is.na(item)) {
data$steps2[item] = 999
}
View(data)
data$steps[928]
data$steps[1]
length(data$steps)
for (i in length(data$steps))
if(is.na(data$steps[i])) {
data$steps2[i] = 999
}
View(data)
is.na(data$steps[928])
is.na(data$steps[1])
data$steps2 = data$steps
for (i in length(data$steps))
if(is.na(data$steps[i])) {
data$steps2[i] = "missing"
}
View(data)
data$steps2[1] = 5
View(data)
data$steps2 = data$steps
for (i in 1:length(data$steps))
if(is.na(data$steps[i])) {
data$steps2[i] = "missing"
}
View(data)
data$steps2 = data$steps
for (i in 1:length(data$steps))
if(is.na(data$steps[i])) {
data$steps2[i] = mean(data$steps, na.rm = TRUE)
}
View(data)
data$steps2 = data$steps
for (i in 1:length(data$steps))
if(is.na(data$steps[i])) {
data$steps2[i] = avgSteps$Freq
}
View(data)
data2 = data
data2[is.na(data2)] = intAvg$step
avgSteps$Freq
View(data2)
na.aggregate(data, interval)
library(zoo)
na.aggregate(data, interval)
View(data)
?na.aggregate
data$steps2 = data$steps
for (i in 1:length(data$steps))
if(is.na(data$steps[i])) {
data$steps2[i] = mean(data$steps, rm.na = TRUE)
}
View(data)
data$steps2 = data$steps
View(data)
for (i in 1:length(data$steps))
if(is.na(data$steps[i])) {
data$steps2[i] = mean(data$steps, rm.na = TRUE)
}
View(data)
mean(data$steps, rm.na = TRUE)
mean(data$steps, na,rm = TRUE)
mean(data$steps, na.rm = TRUE)
for (i in 1:length(data$steps))
if(is.na(data$steps[i])) {
data$steps2[i] = mean(data$steps, na.rm = TRUE)
}
dataNew = data.frame(data$steps2, data$date, data$interval)
View(dataNew)
stepsbydayNew = aggregate(steps2 ~ date, data = dataNew, sum)
hist(stepsbydayNew$steps2)
mean(stepsbydayNew$steps2, na.rm = TRUE)
median(stepsbydayNew$steps2, na.rm = TRUE)
stepsbydayNew = aggregate(steps2 ~ date, data = dataNew, sum)
dataNew = data.frame(steps = data$steps2, date = data$date, interval = data$interval)
View(dataNew)
stepsbydayNew = aggregate(steps ~ date, data = dataNew, sum)
hist(stepsbydayNew$steps)
mean(stepsbydayNew$steps, na.rm = TRUE)
median(stepsbydayNew$steps, na.rm = TRUE)
meanSteps = mean(stepsbyday$steps, na.rm = TRUE)
medianSteps = median(stepsbyday$steps, na.rm = TRUE)
stepsbyday = aggregate(steps ~ date, data = data, sum)
hist(stepsbyday$steps)
meanSteps = mean(stepsbyday$steps, na.rm = TRUE)
meanSteps
?weekdays
weekdays(dataNew)
weekdays(dataNew$date)
day = weekdays(dataNew$date)
day[4]
dayType = vector()
for (item in day) {
if (item == "Saturday" || item == "Sunday")
dayType = append(dayType, "weekend")
} else {
dayType = append(dayType, "weekday")
}
}
dayType
dayType = vector()
for (item in day) {
if (item == "Saturday" || item == "Sunday")
dayType = append(dayType, "weekend")
} else {
dayType = append(dayType, "weekday")
}
for (item in day) { {
if (item == "Saturday" || item == "Sunday")
dayType = append(dayType, "weekend")
} else {
dayType = append(dayType, "weekday")
}
}
?append
for (item in day) {
print item
}
for (item in day) {
print item }
for (item in day) {
print(item) }
for (item in day) {
if (item == "Saturday" | item == "Sunday")
dayType = append(dayType, "weekend")
} else {
dayType = append(dayType, "weekday")
}
dayType
day(1:56)
day[1:56]
dayType = vector()
for (item in day) {
if (item == "Saturday" || item == "Sunday")
dayType = append(dayType, "weekend")
} else {
dayType = append(dayType, "weekday")
}
dayType = vector()
for (item in day) {
if (item == "Saturday" || item == "Sunday")
dayType = append(dayType, "weekend")
} else {
dayType = append(dayType, "weekday")
}
dayType = list()
for (item in day) {
if (item == "Saturday" || item == "Sunday")
dayType = append(dayType, "weekend")
} else {
dayType = append(dayType, "weekday")
}
dayType = vector()
for (item in day) {
if (item == "Saturday" || item == "Sunday")
dayType = append(dayType, "weekend")
}
dayType
dayType[1]
dayType[6]
dayType[66]
dayType[662435]
dayType[662]
dayType[444]
dayType = vector()
for (item in day) {
if (item == "Saturday" | item == "Sunday")
dayType = append(dayType, "weekend")
}
dayType = vector()
for (item in day)
if (item == "Saturday" | item == "Sunday")
dayType = append(dayType, "weekend")
dayType = vector()
for (item in day)
if (item == "Saturday" || item == "Sunday")
dayType = append(dayType, "weekend")
dayType = vector()
for (item in day) {
if (item == "Saturday" || item == "Sunday") {
dayType = append(dayType, "weekend")
} else {
dayType = append(dayType, "weekday")
}
}
dataNew$dayType = dayType
View(dataNew)
dataNew$dayType[1500]
class(dataNew$dayType)
dataNew$dayType = factor(dayType)
class(dataNew$dayType)
qplot(displ, cty, data = mpg, facets = .~drv, geom = c("point","smooth"),
method = "lm") ## sho
avgStepsNew  = data.frame(xtabs(steps~interval,aggregate(steps~interval,dataNew,mean)))
qplot(interval, steps, data = avgStepsNew, facets = .~dayType, geom = c("point","smooth"),
method = "lm") ## sho
avgStepsNew  = data.frame(xtabs(steps~interval+dayType,aggregate(steps~interval+dayType,dataNew,mean)))
qplot(interval, steps, data = avgStepsNew, facets = .~dayType, geom = c("point","smooth"),
method = "lm") ## sho
View(avgStepsNew)
qplot(interval, Freq, data = avgStepsNew, facets = .~dayType, geom = c("point","smooth"),
method = "lm") ## sho
qplot(interval, Freq, data = avgStepsNew, facets = dayType~., geom = c("point","smooth"),
method = "lm") ## sho
qplot(interval, Freq, data = avgStepsNew, facets = dayType~.)
set.seed(1234)
par(mar = c(0,0,0,0))
x = rnrorm(12, mean = rep(1:3, each = 4), sd = 0.2)
x = rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y = rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
x
hist(x)
set.seed(1234)
par(mar = c(0,0,0,0))
x = rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y = rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(x,y, col = "blue", pch=19, cex = 2)
test(x + 0.05, y + 0.05, labels=as.character(1:12))
x
y
plot(x,y, col = "blue", pch=19, cex = 2)
plot(x,y, col = "blue", pch=19, cex = 2)
test(x + 0.05, y + 0.05, labels=as.character(1:12))
?test
text(x + 0.05, y + 0.05, labels=as.character(1:12)) ## add labels slightly off center
text(x + 0.08, y + 0.08, labels=as.character(1:12)) ## add labels slightly off center
plot(x,y, col = "blue", pch=19, cex = 2)
text(x + 0.08, y + 0.08, labels=as.character(1:12)) ## add labels slightly off center
df = data.frame(x = x, y = x)
dist(df)
hClustering = hclust(dist)
hClustering = hclust(distxy)
distxy
distxy = dist(df) # calculates distance between all rows in df (distance matrix)  5 and 6 are closest
hClustering = hclust(distxy)
hClustering
plot(hClustering) ## plot the clusters
par(mar = c(0,0,0,0))
plot(hClustering) ## plot the clusters
plot(hClustering) ## plot the clusters
plot(hClustering) ## plot the clusters
set.seed(1234)
x = rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y = rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(x,y, col = "blue", pch=19, cex = 2)
text(x + 0.08, y + 0.08, labels=as.character(1:12)) ## add labels slightly off center
df = data.frame(x = x, y = x)
distxy = dist(df) # calculates distance between all rows in df (distance matrix)  5 and 6 are closest
hClustering = hclust(distxy)
plot(hClustering) ## plot the clusters --> doesn't tell you how many clusters
df = data.frame(x = x, y = y)
distxy = dist(df) # calculates distance between all rows in df (distance matrix)  5 and 6 are closest
hClustering = hclust(distxy)
plot(hClustering) ## plot the clusters --> doesn't tell you how many clusters
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*!  Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
myplclust(distxy)
myplclust(hClustering, lab = rep(1:3),each = 4), lab.col = rep(1:3, each = 4))
myplclust(hClustering, lab = rep(1:3,each = 4), lab.col = rep(1:3, each = 4))
par(mar = c(4,4,4,4))
myplclust(hClustering, lab = rep(1:3,each = 4), lab.col = rep(1:3, each = 4)) ## function below, groups by cluster number
par(mar = c(5,5,5,5))
myplclust(hClustering, lab = rep(1:3,each = 4), lab.col = rep(1:3, each = 4)) ## function below, groups by cluster number
df = data.frame(x = x, y = y)
dataMatrix = as.matrix(df)[sample(1:12),]
heatmap(dataMatrix)
set.seed(1234)
x = rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y = rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(x,y, col = "blue", pch=19, cex = 2)
text(x + 0.08, y + 0.08, labels=as.character(1:12)) ## add labels slightly off center
df = data.frame(x,y)
kmeansObj = kmeans(df, centers = 3)
names(kmeansObj)
kmeansObj$cluster
?kmeans
kmeansObj$cluster ## shows cluster of each data index
kmeansObj$centers
par(mar = rep(0.2, 4))
plot(x,y,col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3) ## add centroid points
set.seed(1234)
dataMatrix = as.matrix(df)[sample(1:12),]
kmeansObj2 = kmeans(dataMatrix, centers = 3)
par(mfrow = c(1,2), mar = c(2,4,0.1,0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix = matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
View(dataMatrix)
heatmap(dataMatrix)
set.seed(67890)
for (i in 1:40) {
coinFlip = rbinom(1, size = 1, prob = 0.5) ## flip a coin
if (coinFlip) { # if coin is heads add a common pattern to that row
dataMatrix[i,] = dataMatrix[i,] + rep(c(0,3), each = 5)
}
}
View(dataMatrix)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1]) ## now right half is darket
heatmap(dataMatrix) ## also shows clusters but no real pattern in data
hh = hclust(dist(dataMatrix)) ## create clusters
hh
dataMatrix
View(dataMatrix)
hh
hh$order
dataMatrixOrdered = dataMatrix[hh$order, ]  ##
View(dataMatrixOrdered)
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab="Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab="Column", ylab = "Column Mean", pch = 19)
svd1 = svd(scale(dataMatrixOrdered))
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[,1], 40:1, , xlab="Row", ylab="First left singular vector", pch = 19)
plot(svd1$v[,1], 40:1, xlab="Column", ylab="First right singular vector", pch = 19)
plot(svd1$v[,1], xlab="Column", ylab="First right singular vector", pch = 19)
par(mfrow = c(1,2))
plot(svd1$d, xlab="Column", ylab="Singular Value")
plot(svd1$d^2/sum(svd1$d^2), xlab="Column", ylab="Proportion of variance exaplined", pch = 19)
sessionInfo()
install.packages("tm")
library(tm)
tm
ls(tm)
ls
files
?tm
tn
tm
??tm
readpdf
readpdf
readpdf()
getReaders()
readPDF
readPDF()
?readPDF
uri <- system.file(file.path("doc", "http://990s.foundationcenter.org/990_pdf_archive/210/210634479/210634479_201212_990.pdf"), package = "tm")
uri
if(all(file.exists(Sys.which(c("pdfinfo", "pdftotext"))))) {
pdf <- readPDF(control = list(text = "-layout"))(elem = list(uri = uri),
language = "en",
id = "id1")
pdf[1:13]
}
install.packages("Rstem")
library(tm)
library(wordcloud)
url <- "http://990s.foundationcenter.org/990_pdf_archive/210/210634479/210634479_201212_990.pdf"
dest <- tempfile(fileext = ".pdf")
download.file(url, dest, mode = "wb")
exe <- "C:\\Program Files\\xpdfbin-win-3.03\\bin32\\pdftotext.exe"
system(paste("\"", exe, "\" \"", dest, "\"", sep = ""), wait = F)
getwd()
install.packages("pdfetch")
library(pdfetch)
?pdfetch
pdfetch_YAHOO(c("AAPL","TSLA"))
stocks = pdfetch_YAHOO(c("AAPL","TSLA"))
View(stocks)
length(stocks)
?pdfetch_YAHOO
stocks = pdfetch_YAHOO(c("HEMP"))
View(stocks)
plot(stocks$HEMP.close)
stocks = pdfetch_YAHOO(c("AAPL","TSLA"))
plot(stocks$AAPL.close)
lines(stocls$TSLA.close)
lines(stocks$TSLA.close)
?tm
tm
ls
functions
ls
ls()
pdfetch_BLS(c("EIUIR","EIUIR100"), 2005, 2010)
econ = pdfetch_BLS(c("EIUIR","EIUIR100"), 2005, 2010)
View(econ)
plot(econ)
econ = pdfetch_BLS(c("EIUIR","EIUIR100"), 1995, 2010)
plot(econ)
setwd("~/Dropbox/Code/gdProject")
